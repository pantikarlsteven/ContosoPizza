# ============================================
# Azure DevOps Multi-Stage YAML Pipeline
# Build + Deploy .NET 9 Minimal API (PlayersApi)
# Includes Dev, QA, and Prod (with staging slot)
# ============================================

trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'
  azureServiceConnection: 'WebAppAzureSubsCon'
  subscriptionId: 'b3342add-7cc4-491b-bf5e-e93aa8e970f2'
  location: 'southeastasia'
  baseResourceGroupName: 'web-app-rg'
  baseWebAppName: 'contosopizza-api-app'
  artifactName: 'drop'

stages:
# ============================================
# BUILD STAGE
# ============================================
- stage: Build
  displayName: "Build and Publish PlayersApi (.NET 9)"
  jobs:
    - job: BuildJob
      displayName: "Build Job"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET 9 SDK'
          inputs:
            packageType: 'sdk'
            version: '9.0.x'

        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet packages'
          inputs:
            command: 'restore'
            projects: 'ContosoPizza/ContosoPizza.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project'
          inputs:
            command: 'build'
            projects: 'ContosoPizza/ContosoPizza.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Publish PlayersApi'
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: 'ContosoPizza/ContosoPizza.csproj'
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'

        - task: CopyFiles@2
          displayName: 'Copy ARM templates'
          inputs:
            SourceFolder: 'ContosoPizza/Infra'
            Contents: '*.json'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/Infra'

        - publish: $(Build.ArtifactStagingDirectory)
          artifact: $(artifactName)

# ============================================
# DEPLOY TO DEV
# ============================================
- stage: Deploy_Dev
  displayName: "Deploy to Development"
  dependsOn: Build
  jobs:
    - deployment: DeployDev
      displayName: "Deploy ARM + App (Dev)"
      environment: 'dev'
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(artifactName)

              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy infrastructure (Dev)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azureServiceConnection)'
                  subscriptionId: '$(subscriptionId)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(baseResourceGroupName)-dev'
                  location: '$(location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.json'
                  csmParametersFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.parameters.dev.json'
                  deploymentMode: 'Incremental'

              - task: AzureWebApp@1
                displayName: 'Deploy PlayersApi to Dev'
                inputs:
                  azureSubscription: '$(azureServiceConnection)'
                  appType: 'webAppLinux'
                  appName: '$(webAppName)-dev'
                  package: '$(Pipeline.Workspace)/$(artifactName)/publish'


# ============================================
# DEPLOY TO QA
# ============================================
- stage: Deploy_QA
  displayName: "Deploy to QA"
  dependsOn: Deploy_Dev
  condition: succeeded()
  jobs:
    - deployment: DeployQA
      displayName: "Deploy ARM + App (QA)"
      environment: 'qa'
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(artifactName)

              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy infrastructure (QA)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azureServiceConnection)'
                  subscriptionId: '$(subscriptionId)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(baseResourceGroupName)-qa'
                  location: '$(location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.json'
                  csmParametersFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.parameters.qa.json'
                  deploymentMode: 'Incremental'

              - task: AzureWebApp@1
                displayName: 'Deploy PlayersApi to QA'
                inputs:
                  azureSubscription: '$(azureServiceConnection)'
                  appType: 'webAppLinux'
                  appName: '$(webAppName)-qa'
                  package: '$(Pipeline.Workspace)/$(artifactName)/publish'

# ============================================
# DEPLOY TO PROD (with staging slot + swap)
# ============================================
- stage: Deploy_Prod
  displayName: "Deploy to Production (Staging Slot Swap)"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
    - deployment: DeployProd
      displayName: "Deploy ARM + App (Prod Slot)"
      environment: 'prod'
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(artifactName)

              # ARM Template deployment
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy infrastructure (Prod)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azureServiceConnection)'
                  subscriptionId: '$(subscriptionId)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(baseResourceGroupName)-prod'
                  location: '$(location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.json'
                  csmParametersFile: '$(Pipeline.Workspace)/$(artifactName)/Infra/azuredeploy.parameters.prod.json'
                  deploymentMode: 'Incremental'

              # Deploy to staging slot
              - task: AzureWebApp@1
                displayName: 'Deploy to Staging Slot'
                inputs:
                  azureSubscription: '$(azureServiceConnection)'
                  appType: 'webAppLinux'
                  appName: '$(baseWebAppName)-prod'
                  package: '$(Pipeline.Workspace)/$(artifactName)/publish'
                  deployToSlotOrASE: true
                  resourceGroupName: '$(baseResourceGroupName)-prod'
                  slotName: 'staging'

              # Swap staging slot to production
              - task: AzureAppServiceManage@0
                displayName: 'Swap Staging Slot to Production'
                inputs:
                  azureSubscription: '$(azureServiceConnection)'
                  WebAppName: '$(baseWebAppName)-prod'
                  ResourceGroupName: '$(baseResourceGroupName)-prod'
                  SourceSlot: 'staging'
                  SwapWithProduction: true
